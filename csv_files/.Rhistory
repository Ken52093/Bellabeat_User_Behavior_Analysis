group_by(Id, Date) %>%
summarise(AverageWeight = mean(WeightKg, na.rm = TRUE)) %>%
ggplot(aes(x=Date, y=AverageWeight)) +
geom_line(alpha = 0.3) +  # make the line slightly transparent to emphasize the smooth line
geom_smooth(se = FALSE, color = 'red') +  # draw a smooth line (trend line)
labs(title = "Weight Change Over Time",
x = "Date",
y = "Average Weight (kg)") +
theme_minimal()
# Replace 'weightlog' with your actual dataframe name
weightloginfo %>%
group_by(Id, Date) %>%
summarise(AverageWeight = mean(WeightKg, na.rm = TRUE)) %>%
ggplot(aes(x=Date, y=AverageWeight)) +
geom_line(alpha = 0.3) +  # make the line slightly transparent to emphasize the smooth line
geom_smooth(se = FALSE, color = 'red') +  # draw a smooth line (trend line)
labs(title = "Weight Change Over Time",
x = "Date",
y = "Average Weight (kg)") +
theme_minimal()
summary(weightlog$WeightKg)
summary(weightloginfo$WeightKg)
# weight change over times
weightloginfo %>%
ggplot(aes(x=Date, y=WeightKg)) +
geom_boxplot() +
labs(title = "Weight Distribution Over Time",
x = "Date",
y = "Weight (kg)") +
theme_minimal()
weightlog %>%
ggplot(aes(x=Date, y=WeightKg)) +
geom_boxplot() +
labs(title = "Weight Distribution Over Time",
x = "Date",
y = "Weight (kg)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# weight change over times
weightloginfo %>%
ggplot(aes(x=Date, y=WeightKg)) +
geom_boxplot() +
labs(title = "Weight Distribution Over Time",
x = "Date",
y = "Weight (kg)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
weightloginfo$WeightQuartile <- with(weightloginfo, cut(WeightKg,
breaks=quantile(WeightKg, probs=seq(0,1, by=0.25), na.rm = TRUE),
include.lowest=TRUE,
labels=c('Q1', 'Q2', 'Q3', 'Q4')))
# Calculate proportion in each quartile by date
weight_quartiles <- weightloginfo %>%
group_by(Date, WeightQuartile) %>%
summarise(Count=n()) %>%
mutate(Proportion = Count / sum(Count))
# Plot
ggplot(weight_quartiles, aes(x=Date, y=Proportion, fill=WeightQuartile)) +
geom_area() +
labs(title="Weight Quartiles Over Time",
x="Date",
y="Proportion",
fill="Weight Quartile") +
theme_minimal()
# Select a specific date
data_date1 <- weightlog %>% filter(Date == "2023-01-01")
# Select a specific date
data_date1 <- weightloginfo %>% filter(Date == "2023-01-01")
# Plot
ggplot(data_date1, aes(x = WeightKg)) +
geom_histogram(binwidth = 1) +
labs(x = "Weight (kg)", y = "Count",
title = "Weight Distribution on 2023-01-01") +
theme_minimal()
# Select a specific date
data_date1 <- weightloginfo %>% filter(Date == "2016-05-01")
# Plot
ggplot(data_date1, aes(x = WeightKg)) +
geom_histogram(binwidth = 1) +
labs(x = "Weight (kg)", y = "Count",
title = "Weight Distribution on 2016-05-01") +
theme_minimal()
# Select a specific date
data_date1 <- weightloginfo %>% filter(Date == "05-01-2016")
# Plot
ggplot(data_date1, aes(x = WeightKg)) +
geom_histogram(binwidth = 1) +
labs(x = "Weight (kg)", y = "Count",
title = "Weight Distribution on 05-01-2016") +
theme_minimal()
# Select a specific date
data_date1 <- weightloginfo %>% filter(Date == "05-01-16")
# Plot
ggplot(data_date1, aes(x = WeightKg)) +
geom_histogram(binwidth = 1) +
labs(x = "Weight (kg)", y = "Count",
title = "Weight Distribution on 05-01-2016") +
theme_minimal()
weightloginfo %>%
ggplot(aes(x=Date, y=WeightKg)) +
geom_boxplot() +
labs(title = "Weight Distribution Over Time",
x = "Date",
y = "Weight (kg)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Create the count plot
ggplot(weightloginfo, aes(x = IsManualReport)) +
geom_bar(fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Count of Manual Reports", x = "IsManualReport", y = "Count")
# Create the count plot
ggplot(weightloginfo, aes(x = IsManualReport)) +
geom_bar(color = IsManualReport) +
theme_minimal() +
labs(title = "Count of Manual Reports", x = "IsManualReport", y = "Count")
# Create the count plot
ggplot(weightloginfo, aes(x = IsManualReport)) +
geom_bar(color = "IsManualReport") +
theme_minimal() +
labs(title = "Count of Manual Reports", x = "IsManualReport", y = "Count")
# Create the count plot
ggplot(weightloginfo, aes(x = IsManualReport)) +
geom_bar(color = "black") +
theme_minimal() +
labs(title = "Count of Manual Reports", x = "IsManualReport", y = "Count")
# Create the count plot
ggplot(weightloginfo, aes(x = IsManualReport, fill = as.factor(IsManualReport))) +
geom_bar(color = "black") +
scale_fill_manual(values = c("blue", "red"), name = "Is Manual Report",
breaks = c("TRUE", "FALSE"), labels = c("Yes", "No")) +
theme_minimal() +
labs(title = "Count of Manual Reports", x = "IsManualReport", y = "Count")
mean(dailyactivity$LightActiveDistance, na.rm = TRUE)
mean(dailyactivity$SedentaryActiveDistance, na.rm = TRUE)
mean(dailyactivity$VeryActiveMinutes, na.rm = TRUE)
mean(dailyactivity$FairlyActiveMinutes, na.rm = TRUE)
# Assuming `weightloginfo` has columns 'Id', 'Date', 'WeightKg'
# Calculate average weight per user over time
avg_weight_per_user <- weightloginfo %>%
group_by(Id, Date) %>%
summarise(AverageWeight = mean(WeightKg, na.rm = TRUE))
# Plot the data
ggplot(avg_weight_per_user, aes(x = Date, y = AverageWeight, group = Id)) +
geom_line(alpha = 0.1) +  # alpha = 0.1 to handle overlap if you have many users
labs(title = "User Weight Loss Over Time",
x = "Date",
y = "Average Weight (Kg)") +
theme_minimal()
# Assuming `weightloginfo` has columns 'Id', 'Date', 'WeightKg'
# Calculate average weight per user over time
avg_weight_per_user <- weightloginfo %>%
group_by(Id, Date) %>%
summarise(AverageWeight = mean(WeightKg, na.rm = TRUE))
# Plot the data
ggplot(avg_weight_per_user, aes(x = Date, y = AverageWeight, group = Id)) +
geom_line(alpha = 0.3) +  # alpha = 0.1 to handle overlap if you have many users
labs(title = "User Weight Loss Over Time",
x = "Date",
y = "Average Weight (Kg)") +
theme_minimal()
# Assuming `sleepday` has columns 'Id', 'Date', 'TotalMinutesAsleep'
# Calculate average sleep duration per user over time
avg_sleep_per_user <- sleepday %>%
group_by(Id, Date) %>%
summarise(AverageSleep = mean(TotalMinutesAsleep, na.rm = TRUE))
# Plot the data
ggplot(avg_sleep_per_user, aes(x = Date, y = AverageSleep, group = Id)) +
geom_line(alpha = 0.1) +  # alpha = 0.1 to handle overlap if you have many users
labs(title = "User Sleep Duration Over Time",
x = "Date",
y = "Average Sleep (Minutes)") +
theme_minimal()
# Calculate average weight over time
avg_weight_over_time <- weightloginfo %>%
group_by(Date) %>%
summarise(AverageWeight = mean(WeightKg, na.rm = TRUE))
# Plot the data
ggplot(avg_weight_over_time, aes(x = Date, y = AverageWeight)) +
geom_line() +
labs(title = "Average Weight Over Time",
x = "Date",
y = "Average Weight (Kg)") +
theme_minimal()
# Calculate average sleep duration over time
avg_sleep_over_time <- sleepday %>%
group_by(Date) %>%
summarise(AverageSleep = mean(TotalMinutesAsleep, na.rm = TRUE))
# Plot the data
ggplot(avg_sleep_over_time, aes(x = Date, y = AverageSleep)) +
geom_line() +
labs(title = "Average Sleep Duration Over Time",
x = "Date",
y = "Average Sleep (Minutes)") +
theme_minimal()
# Plot the data
ggplot(avg_sleep_over_time, aes(x = Date, y = AverageSleep)) +
geom_smooth() +
labs(title = "Average Sleep Duration Over Time",
x = "Date",
y = "Average Sleep (Minutes)") +
theme_minimal()
# Plot the data
ggplot(avg_sleep_over_time, aes(x = Date, y = AverageSleep)) +
geom_line() +
labs(title = "Average Sleep Duration Over Time",
x = "Date",
y = "Average Sleep (Minutes)") +
theme_minimal()
# Plot the data
ggplot(avg_sleep_over_time, aes(x = Date, y = AverageSleep)) +
geom_smooth() +
labs(title = "Average Sleep Duration Over Time",
x = "Date",
y = "Average Sleep (Minutes)") +
theme_minimal()
# Calculate average weight over time
avg_weight_over_time <- weightloginfo %>%
group_by(Date) %>%
summarise(AverageWeight = mean(WeightKg, na.rm = TRUE))
# Plot the data
ggplot(avg_weight_over_time, aes(x = Date, y = AverageWeight)) +
geom_smooth() +
labs(title = "Average Weight Over Time",
x = "Date",
y = "Average Weight (Kg)") +
theme_minimal()
# Calculate average weight over time
avg_weight_over_time <- weightloginfo %>%
group_by(Date) %>%
summarise(AverageWeight = mean(WeightPounds, na.rm = TRUE))
# Plot the data
ggplot(avg_weight_over_time, aes(x = Date, y = AverageWeight)) +
geom_smooth() +
labs(title = "Average Weight Over Time",
x = "Date",
y = "Average Weight (pounds)") +
theme_minimal()
# Calculate average weight over time
avg_weight_over_time <- weightloginfo %>%
group_by(Date) %>%
summarise(AverageWeight = mean(WeightPounds))
# Plot the data
ggplot(avg_weight_over_time, aes(x = Date, y = AverageWeight)) +
geom_smooth() +
labs(title = "Average Weight Over Time",
x = "Date",
y = "Average Weight (pounds)") +
theme_minimal()
# Calculate average weight over time
avg_weight_over_time <- weightloginfo %>%
group_by(Date) %>%
summarise(AverageWeight = mean(WeightPounds))
# Plot the data
ggplot(avg_weight_over_time, aes(x = Date, y = AverageWeight)) +
geom_line() +
labs(title = "Average Weight Over Time",
x = "Date",
y = "Average Weight (pounds)") +
theme_minimal()
# Your original code
ggplot(avg_weight_over_time, aes(x = Date, y = AverageWeight)) +
geom_smooth() +
labs(title = "Average Weight Over Time",
x = "Date",
y = "Average Weight (pounds)") +
theme_minimal()
# Adjusted to include a group aesthetic
ggplot(avg_weight_over_time, aes(x = Date, y = AverageWeight)) +
geom_smooth(aes(group = 1)) +  # Added group = 1 inside aes() for geom_smooth
labs(title = "Average Weight Over Time",
x = "Date",
y = "Average Weight (pounds)") +
theme_minimal()
# Adjusted to include a group aesthetic
ggplot(avg_weight_over_time, aes(x = Date, y = AverageWeight)) +
geom_smooth(aes(group = 1)) +  # Added group = 1 inside aes() for geom_smooth
labs(title = "Average Weight Over Time",
x = "Date",
y = "Average Weight (pounds)") +
theme_minimal()
# Adjusted to include a group aesthetic
ggplot(avg_weight_over_time, aes(x = Date, y = AverageWeight)) +
geom_smooth() +  # Added group = 1 inside aes() for geom_smooth
labs(title = "Average Weight Over Time",
x = "Date",
y = "Average Weight (pounds)") +
theme_minimal()
# Weight Loss Over Time
avg_weight_over_time <- weightloginfo %>%
group_by(Date) %>%
summarise(AverageWeight = mean(WeightKg, na.rm = TRUE))
ggplot(avg_weight_over_time, aes(x = Date, y = AverageWeight)) +
geom_smooth(aes(group = 1)) +  # Added group = 1 inside aes() for geom_smooth
labs(title = "Average Weight Over Time",
x = "Date",
y = "Average Weight (pounds)") +
theme_minimal()
# Weight Loss Over Time
avg_weight_over_time <- weightloginfo %>%
group_by(Date) %>%
summarise(AverageWeight = mean(WeightKg))
ggplot(avg_weight_over_time, aes(x = Date, y = AverageWeight)) +
geom_smooth(aes(group = 1)) +  # Added group = 1 inside aes() for geom_smooth
labs(title = "Average Weight Over Time",
x = "Date",
y = "Average Weight (pounds)") +
theme_minimal()
# Weight Loss Over Time
avg_weight_over_time <- weightloginfo %>%
group_by(Date) %>%
summarise(AverageWeight = mean(WeightKg, na.rm = TRUE))
ggplot(avg_weight_over_time, aes(x = Date, y = AverageWeight)) +
geom_smooth(aes(group = 1)) +  # Added group = 1 inside aes() for geom_smooth
labs(title = "Average Weight Over Time",
x = "Date",
y = "Average Weight (pounds)") +
theme_minimal()
# Weight Loss Over Time
avg_weight_over_time <- weightloginfo %>%
group_by(Date) %>%
summarise(AverageWeight = mean(WeightKg, na.rm = TRUE))
ggplot(avg_weight_over_time, aes(x = Date, y = AverageWeight)) +
geom_smooth(aes(group = 1)) +  # Added group = 1 inside aes() for geom_smooth
labs(title = "Average Weight Over Time",
x = "Date",
y = "Average Weight (pounds)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Weight Loss Over Time
avg_weight_over_time <- weightloginfo %>%
group_by(Date) %>%
summarise(AverageWeight = mean(WeightKg, na.rm = TRUE))
ggplot(avg_weight_over_time, aes(x = Date, y = AverageWeight)) +
geom_smooth(aes(group = 1)) +  # Added group = 1 inside aes() for geom_smooth
labs(title = "Average Weight Over Time",
x = "Date",
y = "Average Weight (KG)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
source("~/Desktop/Google Certificate/Fitabase Data /Bellabeat.R")
install.packages("ggplot2")
# Calories Burnt Over Time
dailyactivity %>%
group_by(ActivityDate) %>%
summarise(AverageCalories = mean(Calories, na.rm = TRUE)) %>%
ggplot(aes(x=ActivityDate, y=AverageCalories)) +
geom_smooth() +
labs(title = "Average Calories Burnt Over Time",
x = "Date",
y = "Average Calories Burnt") +
theme_minimal()
summary(weightloginfo$WeightKg)
dailyactivity %>%
group_by(ActivityDate) %>%
summarise(AverageCalories = mean(Calories, na.rm = TRUE)) %>%
ggplot(aes(x=ActivityDate, y=AverageCalories)) +
geom_smooth() +
labs(title = "Average Calories Burnt Over Time",
x = "Date",
y = "Average Calories Burnt") +
theme_minimal()
dailyactivity %>%
group_by(ActivityDate) %>%
summarise(AverageCalories = mean(Calories, na.rm = TRUE)) %>%
ggplot(aes(x=ActivityDate, y=AverageCalories)) +
geom_smooth() +
labs(title = "Average Calories Burnt Over Time",
x = "Date",
y = "Average Calories Burnt") +
theme_minimal()
# Calories Burnt Over Time
dailyactivity %>%
group_by(ActivityDate) %>%
summarise(AverageCalories = mean(Calories, na.rm = TRUE)) %>%
ggplot(aes(x=ActivityDate, y=AverageCalories)) +
geom_smooth(aes(group = 1)) +
labs(title = "Average Calories Burnt Over Time",
x = "Date",
y = "Average Calories Burnt") +
theme_minimal()
# Calories Burnt Over Time
dailyactivity %>%
group_by(ActivityDate) %>%
summarise(AverageCalories = mean(Calories, na.rm = TRUE)) %>%
ggplot(aes(x=ActivityDate, y=AverageCalories)) +
geom_smooth(aes(group = 1)) +
labs(title = "Average Calories Burnt Over Time",
x = "Date",
y = "Average Calories Burnt") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Calculate average sleep duration over time
avg_sleep_over_time <- sleepday %>%
group_by(Date) %>%
summarise(AverageSleep = mean(TotalMinutesAsleep, na.rm = TRUE))
# Plot the data
ggplot(avg_sleep_over_time, aes(x = Date, y = AverageSleep)) +
geom_smooth() +
labs(title = "Average Sleep Duration Over Time",
x = "Date",
y = "Average Sleep (Minutes)") +
theme_minimal()
# Calculate average sleep duration over time
avg_sleep_over_time <- sleepday %>%
group_by(Date) %>%
summarise(AverageSleep = mean(TotalMinutesAsleep, na.rm = TRUE))
# Plot the data
ggplot(avg_sleep_over_time, aes(x = Date, y = AverageSleep)) +
geom_smooth(aes(group = 1)) +
labs(title = "Average Sleep Duration Over Time",
x = "Date",
y = "Average Sleep (Minutes)") +
theme_minimal()
# Calculate average sleep duration over time
avg_sleep_over_time <- sleepday %>%
group_by(Date) %>%
summarise(AverageSleep = mean(TotalMinutesAsleep, na.rm = TRUE))
# Plot the data
ggplot(avg_sleep_over_time, aes(x = Date, y = AverageSleep)) +
geom_smooth(aes(group = 1)) +
labs(title = "Average Sleep Duration Over Time",
x = "Date",
y = "Average Sleep (Minutes)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
source("~/Desktop/Google Certificate/Fitabase Data /Bellabeat.R")
# Read the daily activity data
dailyactivity <- read.csv("/Users/kentseng/Desktop/Google Certificate/Fitabase Data /csv_files/dailyActivity_merged.csv")
# Read the daily activity data
dailyactivity <- read.csv("/Users/kentseng/Desktop/Google Certificate/Bellabeat_ Project_Fitabase Data /csv_files/dailyActivity_merged.csv")
# Read the daily calories data
dailyclalories <- read.csv("/Users/kentseng/Desktop/Google Certificate/Bellabeat_ Project_Fitabase Data /csv_files/dailyCalories_merged.csv")
# Read the daily steps data
dailysteps <- read.csv("/Users/kentseng/Desktop/Google Certificate/Bellabeat_ Project_Fitabase Data /csv_files/dailySteps_merged.csv")
# Read the heart_rate data
heartrate <- read.csv("/Users/kentseng/Desktop/Google Certificate/Bellabeat_ Project_Fitabase Data /csv_files/heartrate_seconds_merged.csv")
# Read the sleep day data
sleepday <- read.csv("/Users/kentseng/Desktop/Google Certificate/Bellabeat_ Project_Fitabase Data /csv_files/update_sleepDay_merged.csv")
# Read the weight log info data
weightloginfo <- read.csv("/Users/kentseng/Desktop/Google Certificate/Bellabeat_ Project_Fitabase Data /csv_files/update_weightLogInfo_merged.csv")
# Read the daily activity data
dailyactivity <- read.csv("dailyActivity_merged.csv")
# Read the daily calories data
dailyclalories <- read.csv("dailyCalories_merged.csv")
# Read the daily steps data
dailysteps <- read.csv("dailySteps_merged.csv")
# Read the heart_rate data
heartrate <- read.csv("heartrate_seconds_merged.csv")
# Read the sleep day data
sleepday <- read.csv("update_sleepDay_merged.csv")
# Read the weight log info data
weightloginfo <- read.csv("update_weightLogInfo_merged.csv")
# Set enviroment
install.packages("ggplot2")
insatll.packages("tidyvers")
install.packages("ggplot2")
#Activity Intensity Distribution
dailyactivity %>%
gather(key = "ActivityIntensity", value = "Minutes", VeryActiveMinutes, FairlyActiveMinutes, LightlyActiveMinutes, SedentaryMinutes) %>%
ggplot(aes(x = Minutes)) +
geom_histogram(bins = 30) +
facet_wrap(~ActivityIntensity, scales = "free_x") +
labs(title = "Distribution of Activity Intensity",
x = "Minutes",
y = "Frequency") +
theme_minimal()
install.packages("ggplot2")
insatll.packages("tidyvers")
library(ggplot2)
library(tidyverse)
library(lubridate)
#Activity Intensity Distribution
dailyactivity %>%
gather(key = "ActivityIntensity", value = "Minutes", VeryActiveMinutes, FairlyActiveMinutes, LightlyActiveMinutes, SedentaryMinutes) %>%
ggplot(aes(x = Minutes)) +
geom_histogram(bins = 30) +
facet_wrap(~ActivityIntensity, scales = "free_x") +
labs(title = "Distribution of Activity Intensity",
x = "Minutes",
y = "Frequency") +
theme_minimal()
# Create the count plot
ggplot(weightloginfo, aes(x = IsManualReport, fill = as.factor(IsManualReport))) +
geom_bar(color = "black") +
scale_fill_manual(values = c("blue", "red"), name = "Is Manual Report",
breaks = c("TRUE", "FALSE"), labels = c("Yes", "No")) +
theme_minimal() +
labs(title = "Count of Manual Reports", x = "IsManualReport", y = "Count")
# Weight Loss Over Time
avg_weight_over_time <- weightloginfo %>%
group_by(Date) %>%
summarise(AverageWeight = mean(WeightKg, na.rm = TRUE))
ggplot(avg_weight_over_time, aes(x = Date, y = AverageWeight)) +
geom_smooth(aes(group = 1)) +  # Added group = 1 inside aes() for geom_smooth
labs(title = "Average Weight Over Time",
x = "Date",
y = "Average Weight (KG)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Calculate average sleep duration over time
avg_sleep_over_time <- sleepday %>%
group_by(Date) %>%
summarise(AverageSleep = mean(TotalMinutesAsleep, na.rm = TRUE))
# Plot the data
ggplot(avg_sleep_over_time, aes(x = Date, y = AverageSleep)) +
geom_smooth(aes(group = 1)) +
labs(title = "Average Sleep Duration Over Time",
x = "Date",
y = "Average Sleep (Minutes)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
